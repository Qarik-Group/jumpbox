#!/bin/bash
VERSION=49

#
# jumpbox - set up a new BOSH director jumpbox
#

set -e

step() {
	echo -e ">> \e[35m$*\e[0m"
}

say() {
	echo -e "   $*"
}

ok() {
	echo -e "   \e[32m$*\e[0m"
}

fail() {
	echo -e "   \e[31m$*\e[0m"
}

warn() {
	echo -e "   \e[33m$*\e[0m"
}

yesno() {
	read -p "$(echo -e "   \e[34m$*\e[0m [Y/n]: ")" answer
	case ${answer} in
	(y|Y|yes) echo "y" ;;
	(*)       echo "n" ;;
	esac
}

version() {
	local bin=$1
	local flag=$2

	if [[ -n "$(command -v ${bin})" ]]; then
		ok "${bin} installed - $(${bin} ${flag} 2>&1)"
	else
		fail "${bin} not installed"
	fi
}

have() {
	local bin=$1
	local flag=$2
	local vers=$3

	if [[ -z ${vers} ]]; then
		step "Installing ${bin}"
		return 1
	fi

	step "Checking for ${bin} v${vers}"
	if [[ -n "$(command -v ${bin})" ]]; then
		if ${bin} ${flag} 2>/dev/null | grep -q "${vers}"; then
			ok "${bin} is already installed ($(${bin} ${flag} 2>&1))"
			return 0
		fi
	fi

	step "Installing ${bin} v${vers}"
	return 1
}

installed() {
	local bin=$1
	local flag=$2
	local msg=${3:$bin}

	ok "installed ${msg} ($(${bin} ${flag} 2>&1))"
}

hello() {
	label=$(echo -ne "\e[01;32m(( jumpbox ))\e[0m")
	cat <<EOF
                   _.-+.
              _.-""     '.
          +:""            '.
          J \\               '.
           L \\             _.-+
           |  '.       _.-"   |
           J    \\  _.-"       L
            L    +"          J
            +    |           |     $label
             \\   |          .+
              \\  |       .-'
               \\ |    .-'
                \\| .-'
                 +

EOF
}

install_core_packages() {
	if [[ -n $(command -v apt-get) ]]; then
		step "Installing Core System Packages (via apt-get)"
		sudo apt-get update >/dev/null
		sudo apt-get install -y git tmux tree pwgen unzip

	elif [[ -n $(command -v yum) ]]; then
		step "Installing Core System Packages (via yum)"
		sudo yum update -y >/dev/null
		sudo yum install -y git tmux tree pwgen unzip

	elif [[ -n $(command -v zypper) ]]; then
		step "Installing Core System Packages (via zypper)"
		# tmux
		if [[ -z $(command -v tmux ) ]]; then
			# http://download.opensuse.org/repositories/home:/MTISupport/SLE_11_SP2/x86_64/tmux-1.7-5.3.x86_64.rpm
			zypper addrepo http://download.opensuse.org/repositories/home:MTISupport/SLE_11_SP2/home:MTISupport.repo
		fi
		# pwgen
		if [[ -z $(command -v pwgen ) ]]; then
			# http://download.opensuse.org/repositories/home:/michalstrnad/SLE_12/x86_64/pwgen-2.07-286.2.x86_64.rpm
			zypper addrepo http://download.opensuse.org/repositories/home:michalstrnad/SLE_12/home:michalstrnad.repo
		fi
		# tree
		if [[ -z $(command -v tree ) ]]; then
			# http://download.opensuse.org/repositories/home:/nelsonglory/SLE_12/x86_64/tree-1.7.0-26.3.x86_64.rpm
			zypper addrepo http://download.opensuse.org/repositories/home:nelsonglory/SLE_12/home:nelsonglory.repo
		fi
		zypper refresh >/dev/null
		zypper install git-core unzip tmux pwgen tree
	fi
}

github_version() {
	local v=${1}
	local repo=${2}
	if [[ "${v}" == "latest" ]]; then
		meta=$(curl -Ls https://api.github.com/repos/${repo}/releases/latest)
		tag=$(jq -r .tag_name <(echo "${meta}"))
		v=${tag#v}
	fi
	echo ${v}
}

install_spruce() {
	# only works on v1.0.2 or newer
	local v=$(github_version ${1} geofffranks/spruce)
	if ! have spruce -v ${v}; then
		sudo curl -LSs -o /usr/local/bin/spruce \
			https://github.com/geofffranks/spruce/releases/download/v${v}/spruce-linux-amd64
		sudo chmod 0755 /usr/local/bin/spruce
		installed spruce -v
	fi
}

install_safe() {
	local v=$(github_version ${1} starkandwayne/safe)
	if ! have safe -v ${v}; then
		sudo curl -LSs -o /usr/local/bin/safe \
			https://github.com/starkandwayne/safe/releases/download/v${v}/safe-linux-amd64
		sudo chmod 0755 /usr/local/bin/safe
		installed safe -v
	fi
}

install_vault() {
	if ! have vault -v $1; then
		curl -LSs -o /tmp/vault.zip \
			https://releases.hashicorp.com/vault/${1}/vault_${1}_linux_amd64.zip
		(cd /usr/local/bin ; sudo unzip -u /tmp/vault.zip ; rm /tmp/vault.zip)
		sudo chmod 0755 /usr/local/bin/vault
		installed vault -v
	fi
}

install_jq() {
	if ! have jq --version ${1}; then
		sudo curl -LSs -o /usr/local/bin/jq \
			https://github.com/stedolan/jq/releases/download/jq-${1}/jq-linux64
		sudo chmod 0755 /usr/local/bin/jq
		installed jq --version
	fi
}

install_genesis() {
	local v=$(github_version ${1} starkandwayne/genesis)
	if ! have genesis -v ${v}; then
		sudo curl -LSs -o /usr/local/bin/genesis \
			https://github.com/starkandwayne/genesis/releases/download/v${v}/genesis
		sudo chmod 0755 /usr/local/bin/genesis
		installed genesis -v
	fi
}

install_rvm() {
	step "Installing rvm"
	if [[ ! -f ~/.rvmrc ]]; then
		echo rvm_silence_path_mismatch_check_flag=1 > ~/.rvmrc
	fi
	if [[ -z "$(command -v rvm)" ]]; then
		say "RVM is not already installed"
		say "Importing GPG key..."

		gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
		say "Running RVM install via curl | sh"
		curl -sSL https://get.rvm.io | bash -s stable

		source ~/.rvm/scripts/rvm
		ok "RVM is installed ($(rvm -v 2>&1))"
	else
		ok "RVM is already installed ($(rvm -v 2>&1))"
	fi
}

install_ruby() {
	if ! have ruby -v ${1}; then
		rvm install ruby-$1
		installed ruby -v
	fi
}

install_bosh_init() {
	if ! have bosh-init -v ${1}; then
		sudo curl -LSs -o /usr/local/bin/bosh-init \
			https://s3.amazonaws.com/bosh-init-artifacts/bosh-init-${1}-linux-amd64
		sudo chmod 0755 /usr/local/bin/bosh-init
		installed bosh-init -v
	fi
}

install_bosh_cli() {
	if ! have bosh -v ${1}; then
		gem install --no-ri --no-rdoc --version "${1}" bosh_cli
		installed bosh -v "BOSH CLI"
	fi
}

install_golang() {
	if ! have go version ${1}; then 
		sudo apt-get install golang-go || sudo yum install golang
		mkdir ${HOME}/work
		export GOPATH=${HOME}/work >> ${HOME}/.profile
		export PATH=${PATH >> ${HOME}/.profile
		go get github.com/tools/godep
	fi
}

install_certstrap() {
	rm -rf certstrap || true
	sudo rm -f /usr/local/bin/certstrap || true
	git clone https://github.com/square/certstrap
	cd certstrap
	./build
	sudo mv ./bin/certstrap /usr/local/bin/certstrap
	rm -rf ../certstrap
	echo "Installed Certstrap"
}

passwordless_sudo() {
	groupadd jumpbox
	if ! grep -q '%jumpbox' /etc/sudoers; then
		cat >>/etc/sudoers <<EOF

# for jumpbox access
%jumpbox ALL=(ALL:ALL) NOPASSWD: ALL
EOF
	fi
}

git_config() {
	if [[ -z "$(command -v git)" ]]; then
		fail "git is not installed"
		return
	fi

	echo
	local gituser=$(git config --global user.name)
	local gitemail=$(git config --global user.email)

	if [[ -z ${gituser} ]]; then
		fail "git user.name is not set"
	else
		say "git user.name  is '${gituser}'"
	fi

	if [[ -z ${gitemail} ]]; then
		fail "git user.email is not set"
	else
		say "git user.email is '${gitemail}'"
	fi
}

configure_git_identity() {
	local gituser=$(git config --global user.name)
	local gitemail=$(git config --global user.email)

	if [[ -z "${gituser}" ]]; then
		while [[ -z "${gituser}" ]]; do
			echo -n "Your Full Name (for git): "
			read gituser
		done
		git config --global user.name "${gituser}"
	else
		ok "Git username is already set to '${gituser}'"
	fi

	if [[ -z "${gitemail}" ]]; then
		while [[ -z "${gitemail}" ]]; do
			echo -n "Your Email Address (for git): "
			read gitemail
		done
		git config --global user.email "${gitemail}"
	else
		ok "Git email address is already set to '${gitemail}'"
	fi

	git config --global credential.helper "cache --timeout=3600000"
	git config --global http.sslverify false
	git config --global push.default matching

	ok "git is configured"
}

all_done() {
	echo
	echo
	echo
	ok "ALL DONE"
	exit 0
}

PATH=/usr/local/bin:$PATH
case "$1" in
(user)
	hello
	install_rvm
	install_ruby     ${WANT_RUBY_VERSION:-2.2.4}
	install_bosh_cli ${WANT_BOSH_VERSION:-1.3184.1.0}
	configure_git_identity
	all_done
	say "(You should now log out and log back in)"
	;;

(system)
	hello
	install_core_packages
	install_jq        ${WANT_JQ_VERSION:-1.5}
	install_spruce    ${WANT_SPRUCE_VERSION:-latest}
	install_safe      ${WANT_SAFE_VERSION:-latest}
	install_vault     ${WANT_VAULT_VERSION:-0.6.0}
	install_bosh_init ${WANT_BOSH_INIT_VERSION:-0.0.81}
	install_genesis   ${WANT_GENESIS_VERSION:-latest}
	install_golang    ${WANT_GOLANG_VERSION:-1.6}
	install_certstrap 
	passwordless_sudo
	all_done
	;;

(useradd)
	hello
	step "Provisioning a new user account"
	full_name=""
	while [[ -z ${full_name} ]]; do
		echo -n "Full name: "
		read full_name
	done
	user_name=""
	while [[ -z ${user_name} ]]; do
		echo -n "Username:  "
		read user_name
	done

	sudo useradd -c "${full_name}" -g staff -m -s /bin/bash "${user_name}"
	sudo usermod -aG jumpbox "${user_name}"
	sudo passwd "${user_name}"
	echo
	echo "You should run \`jumpbox user\` now, as ${user_name}:"
	echo "  sudo -iu ${user_name}"
	echo "  jumpbox user"
	echo
	;;

(sync)
	hello
	step "Downloading latest version of \`jumpbox\` from Github"
	tmpfile=$(mktemp /tmp/jumpbox.XXXXXXXXX)
	trap "rm -f ${tmpfile}" QUIT INT TERM EXIT
	curl -Lso "${tmpfile}" https://raw.githubusercontent.com/jhunt/jumpbox/master/bin/jumpbox

	if diff -q ${tmpfile} ${BASH_SOURCE[0]} &>/dev/null; then
		# exit 0 = no difference between files
		echo "${BASH_SOURCE[0]} is already at the latest version"
		exit 0
	fi

	if [[ $(yesno "Upgrade?") != "y" ]]; then
		fail "Bailing out..."
		exit 1
	fi

	if cat ${tmpfile} > ${BASH_SOURCE[0]}; then
		exec $0 version
	fi
	fail "Upgrade failed..."
	exit 1
	;;

(-v|--version|version)
	echo "jumpbox v${VERSION}"
	;;

("")
	hello
	step "Checking jumpbox installation"
	version jumpbox -v
	version ruby -v
	version rvm -v
	version bosh -v
	version bosh-init -v
	version jq --version
	version spruce -v
	version safe -v
	version vault -v
	version genesis -v
	git_config
	echo
	say "To bootstrap this installation,  try \`jumpbox system\`"
	say "To set up your personal environment: \`jumpbox user\`"
	say "To update this copy of jumpbox, use: \`jumpbox sync\`"
	say "To create a new local user account:  \`jumpbox useradd\`"
	;;

(*)
	echo >&2 "USAGE: $0 [system|user|useradd]"
	exit 1
	;;
esac

# vim:ft=bash
